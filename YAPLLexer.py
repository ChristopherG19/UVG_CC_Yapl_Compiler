# Generated from YAPL.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,47,310,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,1,1,1,1,2,1,
        2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,5,5,118,8,5,10,5,12,5,
        121,9,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,5,6,132,8,6,10,6,12,
        6,135,9,6,1,6,1,6,1,6,1,6,1,7,4,7,142,8,7,11,7,12,7,143,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,
        1,24,1,24,1,24,5,24,231,8,24,10,24,12,24,234,9,24,1,24,1,24,1,25,
        4,25,239,8,25,11,25,12,25,240,1,26,1,26,5,26,245,8,26,10,26,12,26,
        248,9,26,1,27,1,27,5,27,252,8,27,10,27,12,27,255,9,27,1,28,1,28,
        1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,
        1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,
        1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,
        1,47,1,47,1,47,3,47,301,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,49,
        1,49,2,119,133,0,50,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
        87,44,89,45,91,46,93,47,95,0,97,0,99,0,1,0,25,3,0,9,10,12,13,32,
        32,2,0,67,67,99,99,2,0,76,76,108,108,2,0,65,65,97,97,2,0,83,83,115,
        115,2,0,78,78,110,110,2,0,79,79,111,111,2,0,84,84,116,116,2,0,73,
        73,105,105,2,0,86,86,118,118,2,0,68,68,100,100,2,0,70,70,102,102,
        2,0,72,72,104,104,2,0,69,69,101,101,2,0,87,87,119,119,2,0,82,82,
        114,114,2,0,80,80,112,112,2,0,85,85,117,117,2,0,34,34,92,92,1,0,
        48,57,1,0,65,90,4,0,48,57,65,90,95,95,97,122,1,0,97,122,6,0,47,47,
        98,98,102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,317,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,93,1,0,0,0,1,101,1,0,0,0,3,103,1,0,0,0,5,105,1,0,0,0,7,
        108,1,0,0,0,9,110,1,0,0,0,11,112,1,0,0,0,13,127,1,0,0,0,15,141,1,
        0,0,0,17,147,1,0,0,0,19,153,1,0,0,0,21,157,1,0,0,0,23,164,1,0,0,
        0,25,167,1,0,0,0,27,170,1,0,0,0,29,175,1,0,0,0,31,180,1,0,0,0,33,
        186,1,0,0,0,35,190,1,0,0,0,37,193,1,0,0,0,39,202,1,0,0,0,41,207,
        1,0,0,0,43,212,1,0,0,0,45,216,1,0,0,0,47,221,1,0,0,0,49,227,1,0,
        0,0,51,238,1,0,0,0,53,242,1,0,0,0,55,249,1,0,0,0,57,256,1,0,0,0,
        59,259,1,0,0,0,61,261,1,0,0,0,63,263,1,0,0,0,65,265,1,0,0,0,67,267,
        1,0,0,0,69,269,1,0,0,0,71,271,1,0,0,0,73,274,1,0,0,0,75,276,1,0,
        0,0,77,278,1,0,0,0,79,280,1,0,0,0,81,282,1,0,0,0,83,284,1,0,0,0,
        85,286,1,0,0,0,87,288,1,0,0,0,89,290,1,0,0,0,91,292,1,0,0,0,93,294,
        1,0,0,0,95,296,1,0,0,0,97,302,1,0,0,0,99,308,1,0,0,0,101,102,5,59,
        0,0,102,2,1,0,0,0,103,104,5,62,0,0,104,4,1,0,0,0,105,106,5,62,0,
        0,106,107,5,61,0,0,107,6,1,0,0,0,108,109,5,38,0,0,109,8,1,0,0,0,
        110,111,5,124,0,0,111,10,1,0,0,0,112,113,5,40,0,0,113,114,5,42,0,
        0,114,119,1,0,0,0,115,118,3,11,5,0,116,118,9,0,0,0,117,115,1,0,0,
        0,117,116,1,0,0,0,118,121,1,0,0,0,119,120,1,0,0,0,119,117,1,0,0,
        0,120,122,1,0,0,0,121,119,1,0,0,0,122,123,5,42,0,0,123,124,5,41,
        0,0,124,125,1,0,0,0,125,126,6,5,0,0,126,12,1,0,0,0,127,128,5,45,
        0,0,128,129,5,45,0,0,129,133,1,0,0,0,130,132,9,0,0,0,131,130,1,0,
        0,0,132,135,1,0,0,0,133,134,1,0,0,0,133,131,1,0,0,0,134,136,1,0,
        0,0,135,133,1,0,0,0,136,137,5,10,0,0,137,138,1,0,0,0,138,139,6,6,
        0,0,139,14,1,0,0,0,140,142,7,0,0,0,141,140,1,0,0,0,142,143,1,0,0,
        0,143,141,1,0,0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,146,6,7,1,
        0,146,16,1,0,0,0,147,148,7,1,0,0,148,149,7,2,0,0,149,150,7,3,0,0,
        150,151,7,4,0,0,151,152,7,4,0,0,152,18,1,0,0,0,153,154,7,5,0,0,154,
        155,7,6,0,0,155,156,7,7,0,0,156,20,1,0,0,0,157,158,7,8,0,0,158,159,
        7,4,0,0,159,160,7,9,0,0,160,161,7,6,0,0,161,162,7,8,0,0,162,163,
        7,10,0,0,163,22,1,0,0,0,164,165,7,8,0,0,165,166,7,11,0,0,166,24,
        1,0,0,0,167,168,7,11,0,0,168,169,7,8,0,0,169,26,1,0,0,0,170,171,
        7,7,0,0,171,172,7,12,0,0,172,173,7,13,0,0,173,174,7,5,0,0,174,28,
        1,0,0,0,175,176,7,13,0,0,176,177,7,2,0,0,177,178,7,4,0,0,178,179,
        7,13,0,0,179,30,1,0,0,0,180,181,7,14,0,0,181,182,7,12,0,0,182,183,
        7,8,0,0,183,184,7,2,0,0,184,185,7,13,0,0,185,32,1,0,0,0,186,187,
        7,2,0,0,187,188,7,13,0,0,188,189,7,7,0,0,189,34,1,0,0,0,190,191,
        7,8,0,0,191,192,7,5,0,0,192,36,1,0,0,0,193,194,7,8,0,0,194,195,7,
        5,0,0,195,196,7,12,0,0,196,197,7,13,0,0,197,198,7,15,0,0,198,199,
        7,8,0,0,199,200,7,7,0,0,200,201,7,4,0,0,201,38,1,0,0,0,202,203,7,
        2,0,0,203,204,7,6,0,0,204,205,7,6,0,0,205,206,7,16,0,0,206,40,1,
        0,0,0,207,208,7,16,0,0,208,209,7,6,0,0,209,210,7,6,0,0,210,211,7,
        2,0,0,211,42,1,0,0,0,212,213,7,5,0,0,213,214,7,13,0,0,214,215,7,
        14,0,0,215,44,1,0,0,0,216,217,7,7,0,0,217,218,7,15,0,0,218,219,7,
        17,0,0,219,220,7,13,0,0,220,46,1,0,0,0,221,222,7,11,0,0,222,223,
        7,3,0,0,223,224,7,2,0,0,224,225,7,4,0,0,225,226,7,13,0,0,226,48,
        1,0,0,0,227,232,5,34,0,0,228,231,3,95,47,0,229,231,8,18,0,0,230,
        228,1,0,0,0,230,229,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,
        233,1,0,0,0,233,235,1,0,0,0,234,232,1,0,0,0,235,236,5,34,0,0,236,
        50,1,0,0,0,237,239,7,19,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,
        238,1,0,0,0,240,241,1,0,0,0,241,52,1,0,0,0,242,246,7,20,0,0,243,
        245,7,21,0,0,244,243,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,
        247,1,0,0,0,247,54,1,0,0,0,248,246,1,0,0,0,249,253,7,22,0,0,250,
        252,7,21,0,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,
        254,1,0,0,0,254,56,1,0,0,0,255,253,1,0,0,0,256,257,5,60,0,0,257,
        258,5,45,0,0,258,58,1,0,0,0,259,260,5,42,0,0,260,60,1,0,0,0,261,
        262,5,47,0,0,262,62,1,0,0,0,263,264,5,43,0,0,264,64,1,0,0,0,265,
        266,5,45,0,0,266,66,1,0,0,0,267,268,5,126,0,0,268,68,1,0,0,0,269,
        270,5,60,0,0,270,70,1,0,0,0,271,272,5,60,0,0,272,273,5,61,0,0,273,
        72,1,0,0,0,274,275,5,61,0,0,275,74,1,0,0,0,276,277,5,40,0,0,277,
        76,1,0,0,0,278,279,5,41,0,0,279,78,1,0,0,0,280,281,5,123,0,0,281,
        80,1,0,0,0,282,283,5,125,0,0,283,82,1,0,0,0,284,285,5,91,0,0,285,
        84,1,0,0,0,286,287,5,93,0,0,287,86,1,0,0,0,288,289,5,46,0,0,289,
        88,1,0,0,0,290,291,5,64,0,0,291,90,1,0,0,0,292,293,5,58,0,0,293,
        92,1,0,0,0,294,295,5,44,0,0,295,94,1,0,0,0,296,300,5,92,0,0,297,
        301,7,23,0,0,298,301,3,97,48,0,299,301,5,34,0,0,300,297,1,0,0,0,
        300,298,1,0,0,0,300,299,1,0,0,0,301,96,1,0,0,0,302,303,5,117,0,0,
        303,304,3,99,49,0,304,305,3,99,49,0,305,306,3,99,49,0,306,307,3,
        99,49,0,307,98,1,0,0,0,308,309,7,24,0,0,309,100,1,0,0,0,11,0,117,
        119,133,143,230,232,240,246,253,300,2,0,1,0,6,0,0
    ]

class YAPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    BLOCK_COMMENT = 6
    LINE_COMMENT = 7
    WS = 8
    CLASS_N = 9
    NOT = 10
    ISVOID = 11
    IF = 12
    FI = 13
    THEN = 14
    ELSE = 15
    WHILE = 16
    LET = 17
    IN = 18
    INHERITS = 19
    LOOP = 20
    POOL = 21
    NEW = 22
    TRUE = 23
    FALSE = 24
    STRING = 25
    INT = 26
    TYPE = 27
    ID = 28
    ASSIGNMENT = 29
    TIMES = 30
    DIV = 31
    PLUS = 32
    MINUS = 33
    TILDE = 34
    LESS = 35
    EQLESS = 36
    EQ = 37
    LPAR = 38
    RPAR = 39
    LCBRACE = 40
    RCBRACE = 41
    LBRACKET = 42
    RBRACKET = 43
    DOT = 44
    AT = 45
    COLON = 46
    COMA = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'>'", "'>='", "'&'", "'|'", "'<-'", "'*'", "'/'", "'+'", 
            "'-'", "'~'", "'<'", "'<='", "'='", "'('", "')'", "'{'", "'}'", 
            "'['", "']'", "'.'", "'@'", "':'", "','" ]

    symbolicNames = [ "<INVALID>",
            "BLOCK_COMMENT", "LINE_COMMENT", "WS", "CLASS_N", "NOT", "ISVOID", 
            "IF", "FI", "THEN", "ELSE", "WHILE", "LET", "IN", "INHERITS", 
            "LOOP", "POOL", "NEW", "TRUE", "FALSE", "STRING", "INT", "TYPE", 
            "ID", "ASSIGNMENT", "TIMES", "DIV", "PLUS", "MINUS", "TILDE", 
            "LESS", "EQLESS", "EQ", "LPAR", "RPAR", "LCBRACE", "RCBRACE", 
            "LBRACKET", "RBRACKET", "DOT", "AT", "COLON", "COMA" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "BLOCK_COMMENT", 
                  "LINE_COMMENT", "WS", "CLASS_N", "NOT", "ISVOID", "IF", 
                  "FI", "THEN", "ELSE", "WHILE", "LET", "IN", "INHERITS", 
                  "LOOP", "POOL", "NEW", "TRUE", "FALSE", "STRING", "INT", 
                  "TYPE", "ID", "ASSIGNMENT", "TIMES", "DIV", "PLUS", "MINUS", 
                  "TILDE", "LESS", "EQLESS", "EQ", "LPAR", "RPAR", "LCBRACE", 
                  "RCBRACE", "LBRACKET", "RBRACKET", "DOT", "AT", "COLON", 
                  "COMA", "ESC", "UNICODE", "HEX" ]

    grammarFileName = "YAPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


