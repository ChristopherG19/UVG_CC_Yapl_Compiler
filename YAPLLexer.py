# Generated from YAPL.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,317,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,1,0,1,0,1,1,
        1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,5,5,120,8,5,
        10,5,12,5,123,9,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,5,6,134,8,
        6,10,6,12,6,137,9,6,1,6,1,6,1,6,1,6,1,7,4,7,144,8,7,11,7,12,7,145,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,
        13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,
        21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,
        23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,5,25,238,8,25,10,
        25,12,25,241,9,25,1,25,1,25,1,26,4,26,246,8,26,11,26,12,26,247,1,
        27,1,27,5,27,252,8,27,10,27,12,27,255,9,27,1,28,1,28,5,28,259,8,
        28,10,28,12,28,262,9,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,
        1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,
        1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,
        1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,3,48,308,8,48,
        1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,2,121,135,0,51,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,
        97,0,99,0,101,0,1,0,25,3,0,9,10,12,13,32,32,2,0,67,67,99,99,2,0,
        76,76,108,108,2,0,65,65,97,97,2,0,83,83,115,115,2,0,78,78,110,110,
        2,0,79,79,111,111,2,0,84,84,116,116,2,0,73,73,105,105,2,0,86,86,
        118,118,2,0,68,68,100,100,2,0,70,70,102,102,2,0,72,72,104,104,2,
        0,69,69,101,101,2,0,87,87,119,119,2,0,82,82,114,114,2,0,80,80,112,
        112,2,0,85,85,117,117,2,0,34,34,92,92,1,0,48,57,1,0,65,90,4,0,48,
        57,65,90,95,95,97,122,1,0,97,122,6,0,47,47,98,98,102,102,110,110,
        114,114,116,116,3,0,48,57,65,70,97,102,324,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
        0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
        0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,
        0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,
        0,95,1,0,0,0,1,103,1,0,0,0,3,105,1,0,0,0,5,107,1,0,0,0,7,110,1,0,
        0,0,9,112,1,0,0,0,11,114,1,0,0,0,13,129,1,0,0,0,15,143,1,0,0,0,17,
        149,1,0,0,0,19,155,1,0,0,0,21,159,1,0,0,0,23,166,1,0,0,0,25,169,
        1,0,0,0,27,172,1,0,0,0,29,177,1,0,0,0,31,182,1,0,0,0,33,188,1,0,
        0,0,35,192,1,0,0,0,37,195,1,0,0,0,39,204,1,0,0,0,41,209,1,0,0,0,
        43,214,1,0,0,0,45,218,1,0,0,0,47,223,1,0,0,0,49,229,1,0,0,0,51,234,
        1,0,0,0,53,245,1,0,0,0,55,249,1,0,0,0,57,256,1,0,0,0,59,263,1,0,
        0,0,61,266,1,0,0,0,63,268,1,0,0,0,65,270,1,0,0,0,67,272,1,0,0,0,
        69,274,1,0,0,0,71,276,1,0,0,0,73,278,1,0,0,0,75,281,1,0,0,0,77,283,
        1,0,0,0,79,285,1,0,0,0,81,287,1,0,0,0,83,289,1,0,0,0,85,291,1,0,
        0,0,87,293,1,0,0,0,89,295,1,0,0,0,91,297,1,0,0,0,93,299,1,0,0,0,
        95,301,1,0,0,0,97,303,1,0,0,0,99,309,1,0,0,0,101,315,1,0,0,0,103,
        104,5,59,0,0,104,2,1,0,0,0,105,106,5,62,0,0,106,4,1,0,0,0,107,108,
        5,62,0,0,108,109,5,61,0,0,109,6,1,0,0,0,110,111,5,38,0,0,111,8,1,
        0,0,0,112,113,5,124,0,0,113,10,1,0,0,0,114,115,5,40,0,0,115,116,
        5,42,0,0,116,121,1,0,0,0,117,120,3,11,5,0,118,120,9,0,0,0,119,117,
        1,0,0,0,119,118,1,0,0,0,120,123,1,0,0,0,121,122,1,0,0,0,121,119,
        1,0,0,0,122,124,1,0,0,0,123,121,1,0,0,0,124,125,5,42,0,0,125,126,
        5,41,0,0,126,127,1,0,0,0,127,128,6,5,0,0,128,12,1,0,0,0,129,130,
        5,45,0,0,130,131,5,45,0,0,131,135,1,0,0,0,132,134,9,0,0,0,133,132,
        1,0,0,0,134,137,1,0,0,0,135,136,1,0,0,0,135,133,1,0,0,0,136,138,
        1,0,0,0,137,135,1,0,0,0,138,139,5,10,0,0,139,140,1,0,0,0,140,141,
        6,6,0,0,141,14,1,0,0,0,142,144,7,0,0,0,143,142,1,0,0,0,144,145,1,
        0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,147,1,0,0,0,147,148,6,
        7,1,0,148,16,1,0,0,0,149,150,7,1,0,0,150,151,7,2,0,0,151,152,7,3,
        0,0,152,153,7,4,0,0,153,154,7,4,0,0,154,18,1,0,0,0,155,156,7,5,0,
        0,156,157,7,6,0,0,157,158,7,7,0,0,158,20,1,0,0,0,159,160,7,8,0,0,
        160,161,7,4,0,0,161,162,7,9,0,0,162,163,7,6,0,0,163,164,7,8,0,0,
        164,165,7,10,0,0,165,22,1,0,0,0,166,167,7,8,0,0,167,168,7,11,0,0,
        168,24,1,0,0,0,169,170,7,11,0,0,170,171,7,8,0,0,171,26,1,0,0,0,172,
        173,7,7,0,0,173,174,7,12,0,0,174,175,7,13,0,0,175,176,7,5,0,0,176,
        28,1,0,0,0,177,178,7,13,0,0,178,179,7,2,0,0,179,180,7,4,0,0,180,
        181,7,13,0,0,181,30,1,0,0,0,182,183,7,14,0,0,183,184,7,12,0,0,184,
        185,7,8,0,0,185,186,7,2,0,0,186,187,7,13,0,0,187,32,1,0,0,0,188,
        189,7,2,0,0,189,190,7,13,0,0,190,191,7,7,0,0,191,34,1,0,0,0,192,
        193,7,8,0,0,193,194,7,5,0,0,194,36,1,0,0,0,195,196,7,8,0,0,196,197,
        7,5,0,0,197,198,7,12,0,0,198,199,7,13,0,0,199,200,7,15,0,0,200,201,
        7,8,0,0,201,202,7,7,0,0,202,203,7,4,0,0,203,38,1,0,0,0,204,205,7,
        2,0,0,205,206,7,6,0,0,206,207,7,6,0,0,207,208,7,16,0,0,208,40,1,
        0,0,0,209,210,7,16,0,0,210,211,7,6,0,0,211,212,7,6,0,0,212,213,7,
        2,0,0,213,42,1,0,0,0,214,215,7,5,0,0,215,216,7,13,0,0,216,217,7,
        14,0,0,217,44,1,0,0,0,218,219,7,7,0,0,219,220,7,15,0,0,220,221,7,
        17,0,0,221,222,7,13,0,0,222,46,1,0,0,0,223,224,7,11,0,0,224,225,
        7,3,0,0,225,226,7,2,0,0,226,227,7,4,0,0,227,228,7,13,0,0,228,48,
        1,0,0,0,229,230,7,4,0,0,230,231,7,13,0,0,231,232,7,2,0,0,232,233,
        7,11,0,0,233,50,1,0,0,0,234,239,5,34,0,0,235,238,3,97,48,0,236,238,
        8,18,0,0,237,235,1,0,0,0,237,236,1,0,0,0,238,241,1,0,0,0,239,237,
        1,0,0,0,239,240,1,0,0,0,240,242,1,0,0,0,241,239,1,0,0,0,242,243,
        5,34,0,0,243,52,1,0,0,0,244,246,7,19,0,0,245,244,1,0,0,0,246,247,
        1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,54,1,0,0,0,249,253,7,
        20,0,0,250,252,7,21,0,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,
        1,0,0,0,253,254,1,0,0,0,254,56,1,0,0,0,255,253,1,0,0,0,256,260,7,
        22,0,0,257,259,7,21,0,0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,
        1,0,0,0,260,261,1,0,0,0,261,58,1,0,0,0,262,260,1,0,0,0,263,264,5,
        60,0,0,264,265,5,45,0,0,265,60,1,0,0,0,266,267,5,42,0,0,267,62,1,
        0,0,0,268,269,5,47,0,0,269,64,1,0,0,0,270,271,5,43,0,0,271,66,1,
        0,0,0,272,273,5,45,0,0,273,68,1,0,0,0,274,275,5,126,0,0,275,70,1,
        0,0,0,276,277,5,60,0,0,277,72,1,0,0,0,278,279,5,60,0,0,279,280,5,
        61,0,0,280,74,1,0,0,0,281,282,5,61,0,0,282,76,1,0,0,0,283,284,5,
        40,0,0,284,78,1,0,0,0,285,286,5,41,0,0,286,80,1,0,0,0,287,288,5,
        123,0,0,288,82,1,0,0,0,289,290,5,125,0,0,290,84,1,0,0,0,291,292,
        5,91,0,0,292,86,1,0,0,0,293,294,5,93,0,0,294,88,1,0,0,0,295,296,
        5,46,0,0,296,90,1,0,0,0,297,298,5,64,0,0,298,92,1,0,0,0,299,300,
        5,58,0,0,300,94,1,0,0,0,301,302,5,44,0,0,302,96,1,0,0,0,303,307,
        5,92,0,0,304,308,7,23,0,0,305,308,3,99,49,0,306,308,5,34,0,0,307,
        304,1,0,0,0,307,305,1,0,0,0,307,306,1,0,0,0,308,98,1,0,0,0,309,310,
        5,117,0,0,310,311,3,101,50,0,311,312,3,101,50,0,312,313,3,101,50,
        0,313,314,3,101,50,0,314,100,1,0,0,0,315,316,7,24,0,0,316,102,1,
        0,0,0,11,0,119,121,135,145,237,239,247,253,260,307,2,0,1,0,6,0,0
    ]

class YAPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    BLOCK_COMMENT = 6
    LINE_COMMENT = 7
    WS = 8
    CLASS_N = 9
    NOT = 10
    ISVOID = 11
    IF = 12
    FI = 13
    THEN = 14
    ELSE = 15
    WHILE = 16
    LET = 17
    IN = 18
    INHERITS = 19
    LOOP = 20
    POOL = 21
    NEW = 22
    TRUE = 23
    FALSE = 24
    SELF = 25
    STRING = 26
    INT = 27
    TYPE = 28
    ID = 29
    ASSIGNMENT = 30
    TIMES = 31
    DIV = 32
    PLUS = 33
    MINUS = 34
    TILDE = 35
    LESS = 36
    EQLESS = 37
    EQ = 38
    LPAR = 39
    RPAR = 40
    LCBRACE = 41
    RCBRACE = 42
    LBRACKET = 43
    RBRACKET = 44
    DOT = 45
    AT = 46
    COLON = 47
    COMA = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'>'", "'>='", "'&'", "'|'", "'<-'", "'*'", "'/'", "'+'", 
            "'-'", "'~'", "'<'", "'<='", "'='", "'('", "')'", "'{'", "'}'", 
            "'['", "']'", "'.'", "'@'", "':'", "','" ]

    symbolicNames = [ "<INVALID>",
            "BLOCK_COMMENT", "LINE_COMMENT", "WS", "CLASS_N", "NOT", "ISVOID", 
            "IF", "FI", "THEN", "ELSE", "WHILE", "LET", "IN", "INHERITS", 
            "LOOP", "POOL", "NEW", "TRUE", "FALSE", "SELF", "STRING", "INT", 
            "TYPE", "ID", "ASSIGNMENT", "TIMES", "DIV", "PLUS", "MINUS", 
            "TILDE", "LESS", "EQLESS", "EQ", "LPAR", "RPAR", "LCBRACE", 
            "RCBRACE", "LBRACKET", "RBRACKET", "DOT", "AT", "COLON", "COMA" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "BLOCK_COMMENT", 
                  "LINE_COMMENT", "WS", "CLASS_N", "NOT", "ISVOID", "IF", 
                  "FI", "THEN", "ELSE", "WHILE", "LET", "IN", "INHERITS", 
                  "LOOP", "POOL", "NEW", "TRUE", "FALSE", "SELF", "STRING", 
                  "INT", "TYPE", "ID", "ASSIGNMENT", "TIMES", "DIV", "PLUS", 
                  "MINUS", "TILDE", "LESS", "EQLESS", "EQ", "LPAR", "RPAR", 
                  "LCBRACE", "RCBRACE", "LBRACKET", "RBRACKET", "DOT", "AT", 
                  "COLON", "COMA", "ESC", "UNICODE", "HEX" ]

    grammarFileName = "YAPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


